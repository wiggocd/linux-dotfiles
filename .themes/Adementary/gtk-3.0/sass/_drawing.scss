// Drawing mixins

// generic drawing of more complex things

@function _widget_edge($c:$borders_edge) {
// outer highlight "used" on most widgets
  @if $c == none { @return none; }
  @else { @return 0 1px $c; }
}

@mixin _shadows($list...) {
//
// Helper mixin to stack up to box-shadows;
//
  $shadows: null;

  @each $shadow in $list {
    @if $shadow!=none { $shadows: $shadows, $shadow; }
  }

  box-shadow: $shadows;
}

// entries
@function entry_focus_border($fc:$accent_primary) {
  @if $variant == 'light' { @return $fc; }
  @else { @return if($fc==$accent_primary, $selected_borders_color, $fc); }
}

@function entry_focus_shadow($fc:$accent_primary) { @return inset 0 0 0 1px $fc; }

@mixin entry($t, $fc:$accent_primary, $edge: none) {
//
// Entries drawing function
//
  $_blank_edge: if($edge == none, none, 0 1px transparentize($edge, 1));
  $_entry_edge: if($edge == none, none, _widget_edge($edge));

  @if $t==normal {
    color: $text_color;
    border-color: $borders_color;
		background-color: if($variant == 'light', darken($base_color, 4%), darken($base_color, 6%));
    background-image: linear-gradient(to bottom, rgba(black, 0.04), transparent);
    @include _shadows(entry_focus_shadow(transparentize($fc, 1)),
              inset 0 1px rgba(black, 0.05),
    				  0 1px transparentize(white, 0.95));
    // for the transition to work the number of shadows in different states needs to match, hence the transparent shadow here.
  }
  @if $t==focus {
    border-color: entry_focus_border($fc);
  }
  @if $t==insensitive {
    color: $insensitive_fg_color;
    border-color: $borders_color;
    background-color: $insensitive_bg_color;
    background-image: none;
    //box-shadow: 0 1px if($variant == 'light', 0 1px white, 0 1px transparentize(white, 0.95));
  }
  @if $t==backdrop {
    color: $backdrop_text_color;
    border-color: $borders_color;
	  background-color: if($variant == 'light', darken($base_color, 2%), darken($base_color, 4%));
    background-image: linear-gradient(to bottom, rgba(black, 0.04), transparent);
    @include _shadows(entry_focus_shadow(transparentize($fc, 1)),
    				  inset 0 1px rgba(black, 0.05),
    				  0 1px if($variant == 'light', transparentize(white, 0.6), transparentize(white, 0.95)));
  }
  @if $t==backdrop-insensitive {
    color: $backdrop_insensitive_color;
    border-color: $backdrop_borders_color;
    background-color: $insensitive_bg_color;
    background-image: none;
    //box-shadow: 0 1px transparentize(white, 0.95);
  }
  @if $t==osd {
    color: $osd_text_color;
    border-color: $osd_borders_color;
    background-color: transparentize(opacify($osd_borders_color, 1), 0.5);
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: 0 1px black;
    -gtk-icon-shadow: 0 1px black;
  }
  @if $t==osd-focus {
    color: $osd_text_color;
    border-color: $accent_primary;
    background-color: transparentize(opacify($osd_borders_color, 1), 0.5);
    background-clip: padding-box;
    box-shadow: entry_focus_shadow($fc);
    text-shadow: 0 1px black;
    -gtk-icon-shadow: 0 1px black;
  }
  @if $t==osd-insensitive {
    color: $osd_insensitive_fg_color;
    border-color: $osd_borders_color;
    background-color: $osd_insensitive_bg_color;
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
  @if $t==osd-backdrop {
    color: $osd_text_color;
    border-color: $osd_borders_color;
    background-color: transparentize(opacify($osd_borders_color, 1), 0.5);
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
}

// buttons

@function _border_color($c, $darker: false) {
  @if $darker == true { @return darken($c, 30%); }
  @else { @return darken($c, 20%); }
}

@function _text_shadow_color ($tc: $fg_color, $bg: $bg_color) {
//
// calculate the color of text shadows
//
// $tc is the text color
// $bg is the background color
//
  $_lbg: lightness($bg)/100%;
  @if lightness($tc)<50% { @return transparentize(white, 1-$_lbg/($_lbg*1.3)); }
  @else { @return transparentize(black, $_lbg*0.8); }
}

@function _button_hilight_color($c) { // deprecated
//
// calculate the right top hilight color for buttons
//
// $c: base color;
//
  //@if lightness($c)>95% { @return transparentize(white, 0.15); }
  //@if lightness($c)>90% { @return transparentize(white, 0.2); }
  //@if lightness($c)>80% { @return transparentize(white, 0.4); }
  @if lightness($c)>50% { @return transparentize(white, 0.6); }
  @else if lightness($c)>40% { @return transparentize(white, 0.8); }
  @else { @return transparentize(white, 0.95); }
}

@mixin _button_text_shadow ($tc:$fg_color, $bg:$bg_color) {
//
// helper function for the text emboss effect
//
// $tc is the optional text color, not the shadow color
//
// TODO: this functions needs a way to deal with special cases
//

  $_shadow: _text_shadow_color($tc, $bg);

  @if lightness($tc)<50% {
    text-shadow: 0 1px $_shadow;
    -gtk-icon-shadow: 0 1px $_shadow;
  }
  @else {
    text-shadow: 0 1px $_shadow;
    -gtk-icon-shadow: 0 1px $_shadow;
  }
}

@mixin button($t, $c:$bg_color, $tc:$fg_color, $edge: none) {
//
// Button drawing function
//
// $t:    button type,
// $c:    base button color for colored* types
// $tc:   optional text color for colored* types
// $edge: set to none to not draw the bottom edge or specify a color to not
//        use the default one
//
// possible $t values:
// normal, hover, active, insensitive, insensitive-active,
// backdrop, backdrop-active, backdrop-insensitive, backdrop-insensitive-active,
// osd, osd-hover, osd-active, osd-insensitive, osd-backdrop, undecorated
//
// This mixin sets the $button_fill global variable which containts the button background-image
//
  $_hilight_color: _button_hilight_color($c);
  $_button_edge: if($edge == none, none, _widget_edge($edge));
  $_blank_edge: if($edge == none, none, _widget_edge(transparentize($edge,1)));

  @if $t==normal {
  // normal button
    color: $tc;
    outline-color: transparent;
    border-color: if($c != $bg_color, _border_color($c), $borders_color);
    background-clip: padding-box;
    background-image: if($variant == 'light',
						          linear-gradient(to bottom,
                                      darken($c, 4%),
                                      darken($c, 5%),
                                      darken($c, 8%)),
						          linear-gradient(to bottom,
                                      lighten($c, 8%),
                                      lighten($c, 7%),
                                      lighten($c, 4%)));
    @include _shadows(
      inset 0 1px if($variant == 'light', rgba(white, 0.45), rgba(white, 0.08)),
      0 1px if($variant == 'light', rgba(white, 0.15), rgba(white, 0.05)),
      inset 0 0 0 1px if($variant == 'light', rgba(white, 0.05), rgba(white, 0.03)),
      inset 0 -1px if($variant == 'light', rgba(white, 0.15), rgba(white, 0.03))
    );
    @include _button_text_shadow($tc, $c);
  }

  @else if $t==colored {
  // special case for colored button(s)
    color: $tc;
    outline-color: transparent;
    border-color: if($c != $bg_color, _border_color($c), $borders_color);
    background-color: $c;
    background-clip: padding-box;
    background-image: linear-gradient(to bottom,
                                      shade($c, 1.1),
                                      shade($c, 0.9));
    @include _shadows(
      inset 0 1px rgba(white, 0.25),
      0 1px if($variant == 'light', rgba(white, 0.15), rgba(white, 0.05)),
      inset 0 0 0 1px rgba(white, 0.05),
      inset 0 -1px rgba(white, 0.1)
    );
    text-shadow: 0 1px rgba(black, 0.3);
  }

  @else if $t==hover {
  // hovered button
    color: $tc;
    outline-color: transparent;
    border-color: if($c != $bg_color, _border_color($c), $borders_color);
    background-clip: padding-box;
    background-image: if($variant == 'light',
						          linear-gradient(to bottom,
                                      $c,
                                      darken($c, 1%),
                                      darken($c, 4%)),
						          linear-gradient(to bottom,
                                      lighten($c, 12%),
                                      lighten($c, 11%),
                                      lighten($c, 8%)));
    @include _shadows(
      inset 0 1px if($variant == 'light', rgba(white, 0.45), rgba(white, 0.08)),
      0 1px if($variant == 'light', rgba(white, 0.15), rgba(white, 0.05)),
      inset 0 0 0 1px if($variant == 'light', rgba(white, 0.05), rgba(white, 0.03)),
      inset 0 -1px if($variant == 'light', rgba(white, 0.15), rgba(white, 0.03))
    );
  }

  @else if $t==colored-hover {
  // special case for colored button(s)
    color: $tc;
    outline-color: transparent;
    border-color: if($c != $bg_color, _border_color($c), $borders_color);
    background-clip: padding-box;
    background-image: linear-gradient(to bottom,
                                      shade($c, 1.2),
                                      shade($c, 1.0));
    @include _shadows(
      inset 0 1px rgba(white, 0.25),
      0 1px if($variant == 'light', rgba(white, 0.15), rgba(white, 0.05)),
      inset 0 0 0 1px rgba(white, 0.05),
      inset 0 -1px rgba(white, 0.1)
    );
    text-shadow: 0 1px rgba(black, 0.3);
  }

  @else if $t==active {
  // pushed button
    color: $tc;
    outline-color: transparent;
    border-color: if($c != $bg_color, _border_color($c), $borders_color);
    background-clip: padding-box;
    background-image: if($variant == 'light', image(darken($c, 12%)),
						          			  image(darken($c, 4%)));
    @include _shadows(
      inset 0 0 0 1px rgba(black, 0.05),
      0 1px if($variant == 'light', rgba(white, 0.15), rgba(white, 0.05))
    );

    text-shadow: none;
    -gtk-icon-shadow: none;
  }

  @else if $t==colored-active {
  // pushed button
    color: $tc;
    outline-color: transparent;
    border-color: if($c != $bg_color, _border_color($c), $borders_color);
    background-clip: padding-box;
    background-image: image(darken($c, 4%));
    @include _shadows(
      inset 0 0 0 1px rgba(black, 0.05),
      0 1px if($variant == 'light', rgba(white, 0.15), rgba(white, 0.05))
    );

    text-shadow: none;
    -gtk-icon-shadow: none;
  }

  @else if $t==insensitive {
  // insensitive button
    $_bg: $insensitive_bg_color;

    label, & { color: if($tc != $fg_color, mix($tc, $_bg, 50%), $insensitive_fg_color); }

    border-color: if($c != $bg_color, _border_color($c), $insensitive_borders_color);
    background-clip: padding-box;
    $button_fill: image($_bg) !global;
    background-image: linear-gradient(to bottom,
                                      transparent,
                                      rgba(black, 0.01),
                                      rgba(black, 0.04));
    background-color: $bg_color;
    text-shadow: none;
    -gtk-icon-shadow: none;
    // white with 0 alpha to avoid an ugly transition, since no color means
    // black with 0 alpha
    box-shadow:
      inset 0 1px if($variant == 'light', rgba(white, 0.25), rgba(white, 0.06)),
      0 1px if($variant == 'light', rgba(white, 0.15), rgba(white, 0.05)),
      inset 0 0 0 1px if($variant == 'light', rgba(white, 0.05), rgba(white, 0.01)),
      inset 0 -1px if($variant == 'light', rgba(white, 0.1), rgba(white, 0.01));
  }

  @else if $t==insensitive-active {
  // insensitive pushed button
    $_bc: if($c != $bg_color, _border_color($c), $insensitive_borders_color);
    background-clip: padding-box;

    label, & { color: $insensitive_fg_color; }

    border-color: $_bc;
    background-color: darken($c, 2%);
    background-image: none;
    // white with 0 alpha to avoid an ugly transition, since no color means
    // black with 0 alpha
    box-shadow: inset 0 0 0 1px rgba(black, 0.05), 0 1px if($variant == 'light', rgba(white, 0.15), rgba(white, 0.05));
  }

  @else if $t==backdrop {
  // backdrop button
    $_bg: if($c != $bg_color, $c, $backdrop_bg_color);
    $_bc: if($variant == 'light', $c, _border_color($c));

    label, & { color: if($tc != $fg_color, mix($tc, $_bg, 80%), $backdrop_fg_color); }

    border-color: if($c != $bg_color, $_bc, $backdrop_borders_color);
    background-clip: padding-box;
    $button_fill: image($_bg) !global;
    background-image: if($variant == 'light',
						          linear-gradient(to bottom,
                                      darken($c, 2%),
                                      darken($c, 3%),
                                      darken($c, 6%)),
						          linear-gradient(to bottom,
                                      lighten($c, 6%),
                                      lighten($c, 5%),
                                      lighten($c, 2%)));
    @include _shadows(
      inset 0 1px if($variant == 'light', rgba(white, 0.45), rgba(white, 0.08)),
      0 1px if($variant == 'light', rgba(white, 0.15), rgba(white, 0.05)),
      inset 0 0 0 1px if($variant == 'light', rgba(white, 0.05), rgba(white, 0.03)),
      inset 0 -1px if($variant == 'light', rgba(white, 0.15), rgba(white, 0.03))
    );
  }

  @else if $t==colored-backdrop {
  // backdrop button
    $_bg: if($c != $bg_color, $c, $backdrop_bg_color);
    $_bc: if($variant == 'light', $c, _border_color($c));

    label, & { color: if($tc != $fg_color, mix($tc, $_bg, 80%), $backdrop_fg_color); }

    border-color: if($c != $bg_color, $_bc, $backdrop_borders_color);
    background-clip: padding-box;
    $button_fill: image($_bg) !global;
    background-image: linear-gradient(to bottom,
                                      lighten($c, 4%),
                                      darken($c, 4%));
    @include _shadows(
      inset 0 1px rgba(white, 0.25),
      0 1px if($variant == 'light', rgba(white, 0.15), rgba(white, 0.05)),
      inset 0 0 0 1px rgba(white, 0.05),
      inset 0 -1px rgba(white, 0.1)
    );
  }

  @else if $t==backdrop-active {
  // backdrop pushed button
    $_bg: if($variant == 'light', darken(mix($c, $base_color, 85%), 8%), darken(mix($c, $base_color, 85%), 4%));
    $_bc: if($variant == 'light', $_bg ,_border_color($c));

    label, & { color: if($tc != $fg_color, mix($tc, $_bg, 80%), $backdrop_fg_color); }

    border-color: if($c != $bg_color, $_bc, $backdrop_borders_color);
    background-clip: padding-box;
    $button_fill: image($_bg) !global;
    background-image: if($variant == 'light',
						          image(darken($c, 10%)),
						          image(darken($c, 2%)));
						          
    @include _shadows(
      inset 0 0 0 1px rgba(black, 0.05),
      0 1px if($variant == 'light', rgba(white, 0.15), rgba(white, 0.05))
    );
  }

  @else if $t==colored-backdrop-active {
  // backdrop pushed button
    $_bg: if($variant == 'light', darken(mix($c, $base_color, 85%), 8%), darken(mix($c, $base_color, 85%), 4%));
    $_bc: if($variant == 'light', $_bg ,_border_color($c));

    label, & { color: if($tc != $fg_color, mix($tc, $_bg, 80%), $backdrop_fg_color); }

    border-color: if($c != $bg_color, $_bc, $backdrop_borders_color);
    background-clip: padding-box;
    $button_fill: image($_bg) !global;
    background-image: image(darken($c, 2%));
    @include _shadows(
      inset 0 0 0 1px rgba(black, 0.05),
      0 1px if($variant == 'light', rgba(white, 0.15), rgba(white, 0.05))
    );
  }

  @else if $t==backdrop-insensitive {
  // backdrop insensitive button

    $_bg: if($c != $bg_color, mix($c, $base_color, 85%), $insensitive_bg_color);
    $_bc: if($variant == 'light', $_bg,_border_color($c));

    label, & { color: if($c != $bg_color, mix($tc, $_bg, 35%), $backdrop_insensitive_color); }

    border-color: if($c != $bg_color, _border_color($c), $insensitive_borders_color);
    background-clip: padding-box;
    $button_fill: image($_bg) !global;
    background-color: $bg_color;
    background-image: linear-gradient(to bottom,
                                      transparent,
                                      transparent,
                                      rgba(black, 0.02));
    text-shadow: none;
    -gtk-icon-shadow: none;
    // white with 0 alpha to avoid an ugly transition, since no color means
    // black with 0 alpha
    box-shadow:
      inset 0 1px if($variant == 'light', rgba(white, 0.25), rgba(white, 0.06)),
      0 1px if($variant == 'light', rgba(white, 0.15), rgba(white, 0.05)),
      inset 0 0 0 1px if($variant == 'light', rgba(white, 0.05), rgba(white, 0.01)),
      inset 0 -1px if($variant == 'light', rgba(white, 0.1), rgba(white, 0.01));
  }

  @else if $t==backdrop-insensitive-active {
  // backdrop insensitive pushed button

    $_bg: if($variant == 'light', darken(mix($c, $base_color, 85%), 8%), darken(mix($c, $base_color, 85%), 4%));
    $_bc: if($variant == 'light', $_bg, _border_color($c));

    label { color: if($c != $bg_color, mix($tc, $_bg, 35%), $backdrop_insensitive_color); }

    border-color: if($c != $bg_color, _border_color($c), $insensitive_borders_color);
    background-clip: padding-box;
    background-color: darken($bg_color, 2%);
    background-image: none;
    box-shadow: inset 0 0 0 1px rgba(black, 0.05), 0 1px $_hilight_color;
  }

  @else if $t==osd {
  //
  // normal osd button
  //
    color: $osd_fg_color;
    border-color: $osd_borders_color;
    background-color: lighten($dark_bg_color, 8%);
    background-image: none;
    box-shadow: inset 0 1px transparentize(white, 0.9);
    text-shadow: none;
    -gtk-icon-shadow: none;
    outline-color: transparentize($osd_fg_color, 0.7);
  }

  @else if $t==osd-hover {
  //
  // active osd button
  //
    color: white;
    border-color: $osd_borders_color;
    background-color: lighten($dark_bg_color, 12%);
    background-image: none;
    box-shadow: inset 0 1px transparentize(white, 0.9);
    text-shadow: none;
    -gtk-icon-shadow: none;
    outline-color: transparentize($osd_fg_color, 0.7);
  }

  @else if $t==osd-active {
  //
  // active osd button
  //
    color: white;
    border-color: $osd_borders_color;
    background-color: darken($dark_bg_color, 4%);
    background-image: none;
    box-shadow: inset 0 1px rgba(black, 0.05);
    text-shadow: none;
    -gtk-icon-shadow: none;
    outline-color: transparentize($osd_fg_color, 0.7);
  }

  @else if $t==osd-insensitive {
  //
  // insensitive osd button
  //
    color: $osd_insensitive_fg_color;
    border-color: $osd_borders_color;
    background-color: transparent;
    $button_fill: image($osd_insensitive_bg_color) !global;
    background-image: $button_fill;
    background-clip: padding-box;
    box-shadow: inset 0 1px transparentize(white, 0.9);
    text-shadow: none;
    -gtk-icon-shadow: none;
  }

  @else if $t==osd-backdrop {
  //
  // backdrop osd button
  //
    color: $osd_fg_color;
    border-color: $osd_borders_color;
    background-color: lighten($dark_bg_color, 4%);
    background-image: none;
    box-shadow: inset 0 1px transparentize(white, 0.9);
    text-shadow: none;
    -gtk-icon-shadow: none;
  }

  @else if $t==undecorated-shadow {
    // only used in some areas incl. titlebar text and titlebuttons
    border-color: transparent;
    background-color: transparent;
    $button_fill: none !global;
    background-image: $button_fill;

    @include _button_text_shadow($tc, $c);
  }

  @else if $t==undecorated {
  //
  // reset
  //
    border-color: transparent;
    background-color: transparent;
    $button_fill: none !global;
    background-image: $button_fill;

    @include _shadows(inset 0 1px transparentize(white, 1), $_blank_edge);
  }
}

@mixin headerbar_fill($c:$headerbar_color, $hc:$top_hilight, $ov: none) {
//
// headerbar fill
//
// $c:  base color
// $hc: top highlight color
// $ov: a background layer for background shorthand (hence no commas!)
//
  background-image: if($variant == 'light',
											linear-gradient(to bottom, darken($c, 6%),
																	   darken($c, 10%)),
											linear-gradient(to bottom, lighten($c, 2%),
																	   darken($c, 2%)));

  box-shadow: inset 0 1px $hc,
							inset 0 0 0 1px if($variant == 'light', transparentize(white, 0.8), transparentize(white, 0.97));
}

@mixin headerbar_fill_colored($c:$headerbar_color, $hc:$top_hilight, $ov: none) {
//
// headerbar fill
//
// $c:  base color
// $hc: top highlight color
// $ov: a background layer for background shorthand (hence no commas!)
//
  background-image: linear-gradient(to bottom, $c,
																	  darken($c, 4%));

  box-shadow: inset 0 1px transparentize(white, 0.8),
              inset 0 0 0 1px transparentize(white, 0.95);
}

@mixin headerbar_fill_backdrop($c:$headerbar_color, $hc:$top_hilight, $ov: none) {
//
// headerbar fill (backdrop)
//
// $c:  base color
// $hc: top highlight color
// $ov: a background layer for background shorthand (hence no commas!)
//
  background-image: if($variant == 'light',
											linear-gradient(to bottom, darken($c, 2%),
																	   darken($c, 6%)),
											linear-gradient(to bottom, lighten($c, 4%),
																	   $c));

  box-shadow: inset 0 1px $hc,
							inset 0 -1px if($variant == 'light', transparentize(white, 0.8), transparentize(white, 0.97));
}

@mixin headerbar_fill_colored_backdrop($c:$headerbar_color, $hc:$top_hilight, $ov: none) {
//
// headerbar fill
//
// $c:  base color
// $hc: top highlight color
// $ov: a background layer for background shorthand (hence no commas!)
//
  background-image: linear-gradient(to bottom, lighten($c, 2%),
																	  darken($c, 2%));

  box-shadow: inset 0 1px transparentize(white, 0.8),
							inset 0 -1px transparentize(white, 0.95);
}

@mixin overshoot($p, $t:normal, $c:$fg_color) {
//
// overshoot
//
// $p: position
// $t: type
// $c: base color
//
// possible $p values:
// top, bottom, right, left
//
// possible $t values:
// normal, backdrop
//

  $_small_gradient_length: 5%;
  $_big_gradient_length: 100%;

  $_position: center top;
  $_small_gradient_size: 100% $_small_gradient_length;
  $_big_gradient_size: 100% $_big_gradient_length;

  @if $p==bottom {
    $_position: center bottom;
    $_linear_gradient_direction: to top;
  }

  @else if $p==right {
    $_position: right center;
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  @else if $p==left {
    $_position: left center;
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  $_small_gradient_color: $c;
  $_big_gradient_color: $c;

  @if $c==$fg_color {
    $_small_gradient_color: darken($borders_color, 10%);
    $_big_gradient_color: $fg_color;

    @if $t==backdrop { $_small_gradient_color: $backdrop_borders_color; }
  }

  $_small_gradient: -gtk-gradient(radial,
                                  $_position, 0,
                                  $_position, 0.5,
                                  to($_small_gradient_color),
                                  to(transparentize($_small_gradient_color, 1)));

  $_big_gradient: -gtk-gradient(radial,
                                $_position, 0,
                                $_position, 0.6,
                                from(transparentize($_big_gradient_color, 0.93)),
                                to(transparentize($_big_gradient_color, 1)));

  @if $t==normal {
    background-image: $_small_gradient, $_big_gradient;
    background-size: $_small_gradient_size, $_big_gradient_size;
  }

  @else if $t==backdrop {
    background-image: $_small_gradient;
    background-size: $_small_gradient_size;
  }

  background-repeat: no-repeat;
  background-position: $_position;

  background-color: transparent; // reset some properties to be sure to not inherit them somehow
  border: none;                  //
  box-shadow: none;              //
}
